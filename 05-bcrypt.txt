//Dotenv is a zero-dependency module -- add .env file in root dir
require('dotenv').config()
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");

//-------------add this package for bcrypt---------------------
const bcrypt = require('bcrypt');
const saltRounds = 10;

const app = express();
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({extended: true}));

mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true,useUnifiedTopology: true})

const userSchema = new mongoose.Schema( {   // add new method
  email : String,
  password : String
});

const User = new mongoose.model("User",userSchema);

app.get("/", (req, res) => {
  res.render("home");
})

app.get("/register", (req, res) => {
  res.render("register");
})

//--------------------CHANGES----------------------
app.post("/register", (req, res) => {
    bcrypt.hash(req.body.password, saltRounds, function(err, hash) {  //-----------ADD PLAIN-PASSWORD--------------
      const newUser = new User({
        email : req.body.username,
        password : hash            //---------ADD HASH ------------
        });

      newUser.save((err)=>{
        if (err) {
          console.log(err);
        }else {
          res.render("secrets");
        }
      });
  });
})

app.get("/login", (req, res) => {
  res.render("login");
})

app.post("/login",(req, res)=>{
  const username = req.body.username;
  const password = req.body.password ;

  User.findOne({email:username},(err,foundUser)=>{
    if (err) {
      console.log(err);
    }else {
      if (foundUser) {
        //-----------CHANGE---------------
        bcrypt.compare(password, foundUser.password, function(err, result) {
            if (result === true) {
              res.render("secrets")
            }
        });
      }
    }
  })
})

app.listen(3000, function() {
  console.log("Server started on port 3000");
});
