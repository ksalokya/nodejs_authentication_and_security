//Dotenv is a zero-dependency module -- add .env file in root dir
require('dotenv').config()
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");

//-------------add this package for passport---------------------
// npm i passport passport-local passport-local-mongoose express-session

const session = require("express-session")
const passport = require("passport")
const passportLocalMongoose = require("passport-local-mongoose")

const app = express();
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({extended: true}));


//------------ ADD THIS PART - express session (put this to ENV)------------------
app.use(session({
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: true,
}));

//passportjs - config
app.use(passport.initialize());
app.use(passport.session());



mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true,useUnifiedTopology: true,useCreateIndex:true})  //changes

const userSchema = new mongoose.Schema( {   // add new method
  email : String,
  password : String
});


//------------ ADD THIS PART - passport-local-mongoose ------------------
userSchema.plugin(passportLocalMongoose);


const User = new mongoose.model("User",userSchema);

//------------ ADD THIS PART - passport-local-mongoose ------------------
// CHANGE: USE "createStrategy" INSTEAD OF "authenticate"
passport.use(User.createStrategy());
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());


app.get("/", (req, res) => {
  res.render("home");
})

app.get("/register", (req, res) => {
  res.render("register");
})

app.get("/login", (req, res) => {
  res.render("login");
})


//--------------------CHANGES----------------------
app.get("/secrets",(req,res)=>{
  //passport js
  if(req.isAuthenticated()){
    res.render("secrets");
  }else{
    res.redirect("/login");
  }
})

app.post("/register", (req, res) => {
  //passport-local-mongoose
  User.register({username: req.body.username},req.body.password,(err, user)=>{
    if (err) {
      console.log(err);
      res.redirect("/register");
    }else {
      passport.authenticate("local")(req,res,()=>{
        res.redirect("/secrets")
      });
    }
  })
})

//--------------------CHANGES----------------------
app.post("/login",(req, res)=>{
  const user = new User({
    username : req.body.username,
    password : req.body.password
  });
  //passport js
  req.login(user,(err)=>{
    if (err) {
      console.log(err);
    }else {
      passport.authenticate("local")(req,res,()=>{
        res.redirect("/secrets")
      });
    }
  })
})

app.get("/logout",(req,res)=>{
  //passport js
  req.logout();
  res.redirect("/");
})

app.listen(3000, function() {
  console.log("Server started on port 3000");
});
